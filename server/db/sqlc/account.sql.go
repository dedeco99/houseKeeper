// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: account.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account(name, email)
  VALUES ($1, $2)
RETURNING
  id, active, name, email, household, created
`

type CreateAccountParams struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Name, arg.Email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Active,
		&i.Name,
		&i.Email,
		&i.Household,
		&i.Created,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :one
UPDATE
  account
SET
  active = NOT active
WHERE
  id = $1
RETURNING
  id, active, name, email, household, created
`

func (q *Queries) DeleteAccount(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRowContext(ctx, deleteAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Active,
		&i.Name,
		&i.Email,
		&i.Household,
		&i.Created,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT
  id, active, name, email, household, created
FROM
  account
WHERE
  id = $1
LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Active,
		&i.Name,
		&i.Email,
		&i.Household,
		&i.Created,
	)
	return i, err
}

const getAccounts = `-- name: GetAccounts :many
SELECT
  id, active, name, email, household, created
FROM
  account
ORDER BY
  id
LIMIT $1 OFFSET $2
`

type GetAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAccounts(ctx context.Context, arg GetAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Active,
			&i.Name,
			&i.Email,
			&i.Household,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE
  account
SET
  name = $2,
  email = $3
WHERE
  id = $1
RETURNING
  id, active, name, email, household, created
`

type UpdateAccountParams struct {
	ID    uuid.UUID `json:"id"`
	Name  string    `json:"name"`
	Email string    `json:"email"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.ID, arg.Name, arg.Email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Active,
		&i.Name,
		&i.Email,
		&i.Household,
		&i.Created,
	)
	return i, err
}
