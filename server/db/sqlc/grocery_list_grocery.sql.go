// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: grocery_list_grocery.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createGroceryListGrocery = `-- name: CreateGroceryListGrocery :one
INSERT INTO grocery_list_grocery(grocery_list, grocery, quantity, price)
  VALUES ($1, $2, $3, $4)
RETURNING
  id, active, grocery_list, grocery, quantity, price, created
`

type CreateGroceryListGroceryParams struct {
	GroceryList uuid.UUID `json:"grocery_list"`
	Grocery     uuid.UUID `json:"grocery"`
	Quantity    int16     `json:"quantity"`
	Price       string    `json:"price"`
}

func (q *Queries) CreateGroceryListGrocery(ctx context.Context, arg CreateGroceryListGroceryParams) (GroceryListGrocery, error) {
	row := q.db.QueryRowContext(ctx, createGroceryListGrocery,
		arg.GroceryList,
		arg.Grocery,
		arg.Quantity,
		arg.Price,
	)
	var i GroceryListGrocery
	err := row.Scan(
		&i.ID,
		&i.Active,
		&i.GroceryList,
		&i.Grocery,
		&i.Quantity,
		&i.Price,
		&i.Created,
	)
	return i, err
}

const deleteGroceryListGrocery = `-- name: DeleteGroceryListGrocery :one
UPDATE
  grocery_list_grocery
SET
  active = NOT active
WHERE
  id = $1
RETURNING
  id, active, grocery_list, grocery, quantity, price, created
`

func (q *Queries) DeleteGroceryListGrocery(ctx context.Context, id uuid.UUID) (GroceryListGrocery, error) {
	row := q.db.QueryRowContext(ctx, deleteGroceryListGrocery, id)
	var i GroceryListGrocery
	err := row.Scan(
		&i.ID,
		&i.Active,
		&i.GroceryList,
		&i.Grocery,
		&i.Quantity,
		&i.Price,
		&i.Created,
	)
	return i, err
}

const getGroceryListGroceries = `-- name: GetGroceryListGroceries :many
SELECT
  grocery_list_grocery.id, grocery_list_grocery.active, grocery_list_grocery.grocery_list, grocery_list_grocery.grocery, grocery_list_grocery.quantity, grocery_list_grocery.price, grocery_list_grocery.created,
  grocery.name,
  grocery.category
FROM
  grocery_list_grocery
  LEFT JOIN grocery ON grocery_list_grocery.grocery = grocery.id
WHERE
  grocery_list_grocery.active = TRUE
  AND grocery_list = $1
ORDER BY
  grocery_list_grocery.created DESC
`

type GetGroceryListGroceriesRow struct {
	ID          uuid.UUID      `json:"id"`
	Active      bool           `json:"active"`
	GroceryList uuid.UUID      `json:"grocery_list"`
	Grocery     uuid.UUID      `json:"grocery"`
	Quantity    int16          `json:"quantity"`
	Price       string         `json:"price"`
	Created     time.Time      `json:"created"`
	Name        sql.NullString `json:"name"`
	Category    uuid.NullUUID  `json:"category"`
}

func (q *Queries) GetGroceryListGroceries(ctx context.Context, groceryList uuid.UUID) ([]GetGroceryListGroceriesRow, error) {
	rows, err := q.db.QueryContext(ctx, getGroceryListGroceries, groceryList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetGroceryListGroceriesRow{}
	for rows.Next() {
		var i GetGroceryListGroceriesRow
		if err := rows.Scan(
			&i.ID,
			&i.Active,
			&i.GroceryList,
			&i.Grocery,
			&i.Quantity,
			&i.Price,
			&i.Created,
			&i.Name,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroceryListGrocery = `-- name: UpdateGroceryListGrocery :one
UPDATE
  grocery_list_grocery
SET
  quantity = $2,
  price = $3
WHERE
  grocery = $1
RETURNING
  id, active, grocery_list, grocery, quantity, price, created
`

type UpdateGroceryListGroceryParams struct {
	Grocery  uuid.UUID `json:"grocery"`
	Quantity int16     `json:"quantity"`
	Price    string    `json:"price"`
}

func (q *Queries) UpdateGroceryListGrocery(ctx context.Context, arg UpdateGroceryListGroceryParams) (GroceryListGrocery, error) {
	row := q.db.QueryRowContext(ctx, updateGroceryListGrocery, arg.Grocery, arg.Quantity, arg.Price)
	var i GroceryListGrocery
	err := row.Scan(
		&i.ID,
		&i.Active,
		&i.GroceryList,
		&i.Grocery,
		&i.Quantity,
		&i.Price,
		&i.Created,
	)
	return i, err
}
